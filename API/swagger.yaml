swagger: "2.0"
info:
  title: Car Rental API
  version: 1.0.0
  description: A simple API for managing car rentals and user authentication.
host: localhost:3000
basePath: /
schemes:
  - http
paths:
  /cars:
    get:
      summary: Get a list of cars
      responses:
        '200':
          description: A list of cars
          schema:
            type: array
            items:
              type: object
              properties:
                id:
                  type: integer
                  description: The unique identifier for the car
                brand:
                  type: string
                  description: The brand of the car
                year:
                  type: integer
                  description: The manufacturing year of the car
                transmission:
                  type: string
                  description: The type of transmission (e.g., automatic, manual)
                doors:
                  type: integer
                  description: The number of doors on the car
                renter_dob:
                  type: string
                  format: date-time
                  description: The date of birth of the renter (minimum age requirement)
                horsepower:
                  type: integer
                  description: The horsepower of the car
                price:
                  type: number
                  format: float
                  description: The rental price of the car
                status:
                  type: string
                  description: The availability status of the car (e.g., available, rented)
                variety:
                  type: string
                  description: The variety or type of the car (e.g., SUV, sedan)
  /cars/{id}:
    get:
      summary: Get a single car by ID
      parameters:
        - in: path
          name: id
          required: true
          type: integer
          description: The ID of the car to retrieve
      responses:
        '200':
          description: Details of a single car
          schema:
            type: object
            properties:
              id:
                type: integer
                description: The unique identifier for the car
              brand:
                type: string
                description: The brand of the car
              year:
                type: integer
                description: The manufacturing year of the car
              transmission:
                type: string
                description: The type of transmission (e.g., automatic, manual)
              doors:
                type: integer
                description: The number of doors on the car
              renter_dob:
                type: string
                format: date-time
                description: The date of birth of the renter (minimum age requirement)
              horsepower:
                type: integer
                description: The horsepower of the car
              price:
                type: number
                format: float
                description: The rental price of the car
              status:
                type: string
                description: The availability status of the car (e.g., available, rented)
              variety:
                type: string
                description: The variety or type of the car (e.g., SUV, sedan)
        '404':
          description: Car not found

  /register:
    post:
      summary: Register a new user
      description: Creates a new user with a username and password.
      parameters:
        - in: body
          name: body
          description: User registration details
          schema:
            type: object
            properties:
              username:
                type: string
                example: "john_doe"
                description: The username for the new user.
              password:
                type: string
                example: "password123"
                description: The password for the new user.
      responses:
        '201':
          description: User registered successfully
          schema:
            type: object
            properties:
              message:
                type: string
                example: "User registered successfully"
        '400':
          description: Bad Request
          schema:
            type: object
            properties:
              error:
                type: string
        '409':
          description: Username already taken
          schema:
            type: object
            properties:
              error:
                type: string
        '500':
          description: Internal Server Error
          schema:
            type: object
            properties:
              error:
                type: string

  /login:
    post:
      summary: Log in a user
      description: Authenticates a user with username and password and returns a JWT token.
      parameters:
        - in: body
          name: body
          description: User login details
          schema:
            type: object
            properties:
              username:
                type: string
                example: "john_doe"
                description: The username for the user.
              password:
                type: string
                example: "password123"
                description: The password for the user.
      responses:
        '200':
          description: Login successful
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Login successful"
              token:
                type: string
                description: The JWT token.
        '400':
          description: Bad Request
          schema:
            type: object
            properties:
              error:
                type: string
        '401':
          description: Invalid credentials
          schema:
            type: object
            properties:
              error:
                type: string
        '500':
          description: Internal Server Error
          schema:
            type: object
            properties:
              error:
                type: string

openapi: 3.0.0
info:
  title: Car Rental API
  description: API for managing car rentals.
  version: 1.0.0
servers:
  - url: http://localhost:3000/api
    description: Development server

paths:
  /rentals:
    post:
      summary: Create a new rental
      description: Rent a car by specifying the car ID. The car status will be updated to unavailable.
      tags:
        - Rentals
      requestBody:
        description: Car ID to rent
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                carId:
                  type: integer
                  description: ID of the car to be rented
                  example: 1
      responses:
        '200':
          description: Rental successfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Successfully rented
        '400':
          description: Bad request, car ID is missing or car is not available
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Car is not available
        '404':
          description: Car not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Car not found
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: An error occurred during the rental process

  /user/{userId}:
    get:
      summary: Get rentals for a user
      description: Retrieve a list of rentals for a specific user by user ID.
      tags:
        - Rentals
      parameters:
        - name: userId
          in: path
          required: true
          description: ID of the user to retrieve rentals for
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: List of rentals for the specified user
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      description: Rental ID
                    car:
                      type: object
                      properties:
                        brand:
                          type: string
                          description: Brand of the car
                        year:
                          type: integer
                          description: Year of the car
                        transmission:
                          type: string
                          description: Transmission type
                        doors:
                          type: integer
                          description: Number of doors
                        horsepower:
                          type: integer
                          description: Horsepower of the car
                        price:
                          type: number
                          format: decimal
                          description: Rental price
                        status:
                          type: string
                          description: Availability status of the car
                        variety:
                          type: string
                          description: Car variety
                        image:
                          type: string
                          description: URL of the car image
                        location:
                          type: string
                          description: Location of the car
        '404':
          description: No rentals found for the user
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: No rentals found
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Failed to fetch rentals
