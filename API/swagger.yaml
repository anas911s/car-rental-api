swagger: "2.0"
info:
  title: Car Rental API
  version: 1.0.0
  description: A simple API for managing car rentals and user authentication.
host: localhost:3000
basePath: /api
schemes:
  - http
paths:
  /users/{id}:
    get:
      summary: Get user details
      description: Fetches details of a user by their ID. The response excludes sensitive information like passwords.
      parameters:
        - in: path
          name: id
          required: true
          type: integer
          description: Unique identifier of the user
      responses:
        '200':
          description: Successful response with user details
          schema:
            type: object
            properties:
              id:
                type: integer
                description: User ID
                example: 1
              username:
                type: string
                description: Username of the user
                example: johndoe
              createdAt:
                type: string
                format: date-time
                description: The date when the user was created
                example: "2023-09-15T08:53:20.123Z"
              updatedAt:
                type: string
                format: date-time
                description: The date when the user was last updated
                example: "2023-09-15T09:05:20.123Z"
        '404':
          description: User not found
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Not found"
        '500':
          description: Internal server error
          schema:
            type: object
            properties:
              error:
                type: string
                example: "An error occurred while fetching user details"

  /cars:
    get:
      summary: Get a list of cars
      responses:
        '200':
          description: A list of cars
          schema:
            type: array
            items:
              type: object
              properties:
                id:
                  type: integer
                  description: The unique identifier for the car
                brand:
                  type: string
                  description: The brand of the car
                year:
                  type: integer
                  description: The manufacturing year of the car
                transmission:
                  type: string
                  description: The type of transmission (e.g., automatic, manual)
                doors:
                  type: integer
                  description: The number of doors on the car
                renter_dob:
                  type: string
                  format: date-time
                  description: The date of birth of the renter (minimum age requirement)
                horsepower:
                  type: integer
                  description: The horsepower of the car
                price:
                  type: number
                  format: float
                  description: The rental price of the car
                status:
                  type: string
                  description: The availability status of the car (e.g., available, rented)
                variety:
                  type: string
                  description: The variety or type of the car (e.g., SUV, sedan)

  /cars/{id}:
    get:
      summary: Get a single car by ID
      parameters:
        - in: path
          name: id
          required: true
          type: integer
          description: The ID of the car to retrieve
      responses:
        '200':
          description: Details of a single car
          schema:
            type: object
            properties:
              id:
                type: integer
                description: The unique identifier for the car
              brand:
                type: string
                description: The brand of the car
              year:
                type: integer
                description: The manufacturing year of the car
              transmission:
                type: string
                description: The type of transmission (e.g., automatic, manual)
              doors:
                type: integer
                description: The number of doors on the car
              renter_dob:
                type: string
                format: date-time
                description: The date of birth of the renter (minimum age requirement)
              horsepower:
                type: integer
                description: The horsepower of the car
              price:
                type: number
                format: float
                description: The rental price of the car
              status:
                type: string
                description: The availability status of the car (e.g., available, rented)
              variety:
                type: string
                description: The variety or type of the car (e.g., SUV, sedan)
        '404':
          description: Car not found

  /register:
    post:
      summary: Register a new user
      description: Creates a new user with a username and password.
      parameters:
        - in: body
          name: body
          description: User registration details
          schema:
            type: object
            properties:
              username:
                type: string
                example: "john_doe"
                description: The username for the new user.
              password:
                type: string
                example: "password123"
                description: The password for the new user.
      responses:
        '201':
          description: User registered successfully
          schema:
            type: object
            properties:
              message:
                type: string
                example: "User registered successfully"
        '400':
          description: Bad Request
          schema:
            type: object
            properties:
              error:
                type: string
        '409':
          description: Username already taken
          schema:
            type: object
            properties:
              error:
                type: string
        '500':
          description: Internal Server Error
          schema:
            type: object
            properties:
              error:
                type: string

  /login:
    post:
      summary: Log in a user
      description: Authenticates a user with username and password and returns a JWT token.
      parameters:
        - in: body
          name: body
          description: User login details
          schema:
            type: object
            properties:
              username:
                type: string
                example: "john_doe"
                description: The username for the user.
              password:
                type: string
                example: "password123"
                description: The password for the user.
      responses:
        '200':
          description: Login successful
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Login successful"
              token:
                type: string
                description: The JWT token.
        '400':
          description: Bad Request
          schema:
            type: object
            properties:
              error:
                type: string
        '401':
          description: Invalid credentials
          schema:
            type: object
            properties:
              error:
                type: string
        '500':
          description: Internal Server Error
          schema:
            type: object
            properties:
              error:
                type: string
